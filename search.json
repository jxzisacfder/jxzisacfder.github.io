[{"title":"解决vscode在macos Catalina上配置C/C++环境及调试问题","date":"2020-02-28T09:16:19.000Z","url":"/2020/02/28/vscode-C-macOS-catalina/","tags":["-vscode"],"categories":["配置"],"content":"本文作者对编译调试的原理一窍不通，只是在完完全全按照知乎及其他网站上的vscode配置C的launch.json&amp;tasks.json&amp;c_cpp_properties.json之后，编译正常，但是无法debug。经数小时的修改，搜索找到了解决方案，从头至尾记录一下。 网上有关在Mac上配置vscode的文章有很多，相信找到这篇文章的人已经阅读过相关文章，这篇文章与很多配置教程的区别就是解决了调试代码时的报错： Warning: Debuggee TargetArchitecture not detected, assuming x86_64. 众所周知，调试有gdb/lldb可选，Mac的小伙伴一般都选用lldb，而出现这个错误大概就是因为Catalina不再支持lldb调试吧。可参考：官方文档解释。 s1：下载vscode并安装 s2: 安装插件：C/C++（提供环境还有intelliSence），Code Runner（用来编译，很方便），CodeLLDB（用来debug，解决Catalina不支持lldb调试问题） s3：创建.json文档 vscode的逻辑是你可以创造很多工作区，每个工作区可以有不同的配置。每个工作区下当然要有项目文件夹，所以第一步就是创造工作区和项目文件夹，我们把C和C++的工作区分开，我们以创建C的工作区为例，C++工作区的话你改个名字就行，而两个工作区的json也基本一样，不一样的地方在后文标注了（只有两处）：在桌面建立一个vscode-c文件夹，打开vscode之后，点击该图左侧边栏第一个图标，选择open folder，选择vscode-c。（达到上述结果有很多方法，怎么都行） 点击file-save workspace as，然后给工作区起名为C，直接保存就行，会创建一个C.code-workspace文件。（以后打开该项目就可以点击这个文件） 在vscode-c文件夹中创建名为.vscode的文件夹（这是一个隐藏文件夹），在该文件夹中创建如图4中的那几个.json文件（忽略那个text.out.DSYM），然后把下面的代码复制到相应文件中（以下代码为从网上各处搜集） 1 launch.json(粘贴后会有几处波浪线，应该是codeLLDB插件的缘故，但是不影响debug使用，可以不用删) 2 tasks.json（要编译c++把command：改为clang++，可能不改也行吧？把args的”-std=c11”改为”-std=c++17”） 3 c_cpp_properties.json 4 settings.json 以上代码有很多我注释掉的部分，原因是有些配置文件是从windows的教程扒下来的，有些Mac上用不了，被我注释了。。。 然后就可以编译加调试了，但像我一样的小白肯定一头雾水，如果你想大致了解这些东西都是干什么的参见以下前俩个链接；解决debug问题的原文链接（该作者也可能是转载）是第三个： Visual Studio Code 如何编写运行 C、C++ 程序？ 玄魂：无废话–Mac OS, VS Code 搭建c/c++基本开发环境 debug解决方法出处 "},{"title":"Hello World","date":"2020-02-26T16:00:00.000Z","url":"/2020/02/27/hello-world/","tags":["-hello world"],"categories":["记录"],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]