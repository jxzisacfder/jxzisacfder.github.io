{"meta":{"title":"jxz4real の blog","subtitle":"Perfection is the enemy of done","description":"爷的秋秋空间","author":"jxz4real","url":"http://yoursite.com","root":"/"},"pages":[{"title":"文章分类","date":"2019-10-30T08:36:49.000Z","updated":"2020-02-28T10:48:45.195Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"解决vscode在macos Catalina上配置C/C++环境及调试问题","slug":"vscode-C-macOS-catalina","date":"2020-02-28T09:16:19.000Z","updated":"2020-02-28T10:06:09.840Z","comments":true,"path":"2020/02/28/vscode-C-macOS-catalina/","link":"","permalink":"http://yoursite.com/2020/02/28/vscode-C-macOS-catalina/","excerpt":"本文作者对编译调试的原理一窍不通，只是在完完全全按照知乎及其他网站上的vscode配置C的launch.json&amp;tasks.json&amp;c_cpp_properties.json之后，编译正常，但是无法debug。经数小时的修改，搜索找到了解决方案，从头至尾记录一下。","text":"本文作者对编译调试的原理一窍不通，只是在完完全全按照知乎及其他网站上的vscode配置C的launch.json&amp;tasks.json&amp;c_cpp_properties.json之后，编译正常，但是无法debug。经数小时的修改，搜索找到了解决方案，从头至尾记录一下。 网上有关在Mac上配置vscode的文章有很多，相信找到这篇文章的人已经阅读过相关文章，这篇文章与很多配置教程的区别就是解决了调试代码时的报错： Warning: Debuggee TargetArchitecture not detected, assuming x86_64. 众所周知，调试有gdb/lldb可选，Mac的小伙伴一般都选用lldb，而出现这个错误大概就是因为Catalina不再支持lldb调试吧。可参考：官方文档解释。 s1：下载vscode并安装 s2: 安装插件：C/C++（提供环境还有intelliSence），Code Runner（用来编译，很方便），CodeLLDB（用来debug，解决Catalina不支持lldb调试问题） s3：创建.json文档 vscode的逻辑是你可以创造很多工作区，每个工作区可以有不同的配置。每个工作区下当然要有项目文件夹，所以第一步就是创造工作区和项目文件夹，我们把C和C++的工作区分开，我们以创建C的工作区为例，C++工作区的话你改个名字就行，而两个工作区的json也基本一样，不一样的地方在后文标注了（只有两处）：在桌面建立一个vscode-c文件夹，打开vscode之后，点击该图左侧边栏第一个图标，选择open folder，选择vscode-c。（达到上述结果有很多方法，怎么都行） 点击file-save workspace as，然后给工作区起名为C，直接保存就行，会创建一个C.code-workspace文件。（以后打开该项目就可以点击这个文件） 在vscode-c文件夹中创建名为.vscode的文件夹（这是一个隐藏文件夹），在该文件夹中创建如图4中的那几个.json文件（忽略那个text.out.DSYM），然后把下面的代码复制到相应文件中（以下代码为从网上各处搜集） 1 launch.json(粘贴后会有几处波浪线，应该是codeLLDB插件的缘故，但是不影响debug使用，可以不用删) // https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md { &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;c Launch&quot;, // 配置名称，将会在启动配置的下拉菜单中显示 &quot;type&quot;: &quot;lldb&quot;, // 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg &quot;request&quot;: &quot;launch&quot;, // 请求配置类型，可以为launch（启动）或attach（附加） &quot;program&quot;: &quot;${fileDirname}/${fileBasenameNoExtension}.out&quot;, // 将要进行调试的程序的路径 //&quot;program&quot;: &quot;${workspaceFolder}/${fileBasenameNoExtension}.out&quot;, &quot;args&quot;: [ &quot;-arg1&quot;, &quot;-arg2&quot; ], // 程序调试时传递给程序的命令行参数，一般设为空即可 &quot;stopAtEntry&quot;: false, // 设为true时程序将暂停在程序入口处，相当于在main上打断点 &quot;cwd&quot;: &quot;${workspaceFolder}&quot;, // 调试程序时的工作目录，此为工作区文件夹；改成${fileDirname}可变为文件所在目录 &quot;environment&quot;: [], // 环境变量 &quot;externalConsole&quot;: true, // 为true时使用单独的cmd窗口，与其它IDE一致；18年10月后设为false可调用VSC内置终端 &quot;internalConsoleOptions&quot;: &quot;neverOpen&quot;, // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？ &quot;MIMode&quot;: &quot;lldb&quot;, // 指定连接的调试器，可以为gdb或lldb。但我没试过lldb //&quot;miDebuggerPath&quot;: &quot;gdb.exe&quot;, // 调试器路径，Windows下后缀不能省略，Linux下则不要 /*&quot;setupCommands&quot;: [ { // 模板自带，好像可以更好地显示STL容器的内容，具体作用自行Google &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: false } ],*/ &quot;preLaunchTask&quot;: &quot;Compile&quot;, // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应 } ] }2 tasks.json（要编译c++把command：改为clang++，可能不改也行吧？把args的”-std=c11”改为”-std=c++17”） // https://code.visualstudio.com/docs/editor/tasks { &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [{ &quot;label&quot;: &quot;Compile&quot;, // 任务名称，与launch.json的preLaunchTask相对应 &quot;command&quot;: &quot;clang&quot;, // 要使用的编译器，C++用g++ &quot;args&quot;: [ //&quot;-g&quot;, // 生成和调试有关的信息 &quot;${file}&quot;, &quot;-std=c11&quot;, &quot;-stdlib=libc++&quot;, &quot;-o&quot;, // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out &quot;${fileDirname}/${fileBasenameNoExtension}.out&quot;, &quot;--debug&quot; //&quot;-Wall&quot;, // 开启额外警告 //&quot;-static-libgcc&quot;, // 静态链接libgcc，一般都会加上 //&quot;-fexec-charset=GBK&quot;, // 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码 // C++最新标准为c++17，或根据自己的需要进行修改 ], // 编译的命令，其实相当于VSC帮你在终端中输了这些东西 &quot;type&quot;: &quot;shell&quot;, // process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍 &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true // 不为true时ctrl shift B就要手动选择了 }, &quot;presentation&quot;: { &quot;echo&quot;: true, &quot;reveal&quot;: &quot;always&quot;, // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档 &quot;focus&quot;: false, // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义 &quot;panel&quot;: &quot;shared&quot; // 不同的文件的编译信息共享一个终端面板 }, // &quot;problemMatcher&quot;:&quot;$gcc&quot; // 此选项可以捕捉编译时终端里的报错信息；但因为有Lint，再开这个可能有双重报错 }] }3 c_cpp_properties.json { &quot;configurations&quot;: [ { &quot;name&quot;: &quot;Mac&quot;, &quot;includePath&quot;: [ &quot;${workspaceFolder}/**&quot;, &quot;/Library/Developer/CommandLineTools/usr/include/c++/v1&quot;, &quot;/usr/local/include&quot;, &quot;/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include&quot;, &quot;/Library/Developer/CommandLineTools/usr/include&quot;, &quot;/usr/include&quot; ], &quot;defines&quot;: [], &quot;macFrameworkPath&quot;: [ &quot;/System/Library/Frameworks&quot;, &quot;/Library/Frameworks&quot; ], &quot;compilerPath&quot;: &quot;/usr/bin/clang&quot;, &quot;cStandard&quot;: &quot;c11&quot;, &quot;cppStandard&quot;: &quot;c++17&quot;, &quot;intelliSenseMode&quot;: &quot;${default}&quot; } ], &quot;version&quot;: 4 }4 settings.json //只在当前工作区有效 { &quot;files.defaultLanguage&quot;: &quot;c&quot;, // ctrl+N新建文件后默认的语言 &quot;editor.formatOnType&quot;: true, // 输入分号(C/C++的语句结束标识)后自动格式化当前这一行的代码 &quot;editor.suggest.snippetsPreventQuickSuggestions&quot;: false, // clangd的snippets有很多的跳转点，不用这个就必须手动触发Intellisense了 &quot;editor.acceptSuggestionOnEnter&quot;: &quot;off&quot;, // 我个人的习惯，按回车时一定是真正的换行，只有tab才会接受Intellisense // &quot;editor.snippetSuggestions&quot;: &quot;top&quot;, // （可选）snippets显示在补全列表顶端，默认是inline &quot;code-runner.runInTerminal&quot;: true, // 设置成false会在“输出”中输出，无法输入 /*&quot;code-runner.executorMap&quot;: { &quot;c&quot;: &quot;cd $dir &amp;&amp; gcc &apos;$fileName&apos; -o &apos;$fileNameWithoutExt.exe&apos; -Wall -g -O2 -static-libgcc -std=c11 -fexec-charset=GBK &amp;&amp; &amp;&apos;$dir$fileNameWithoutExt&apos;&quot;, &quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ &apos;$fileName&apos; -o &apos;$fileNameWithoutExt.exe&apos; -Wall -g -O2 -static-libgcc -std=c++17 -fexec-charset=GBK &amp;&amp; &amp;&apos;$dir$fileNameWithoutExt&apos;&quot; // &quot;c&quot;: &quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt.exe -Wall -g -O2 -static-libgcc -std=c11 -fexec-charset=GBK &amp;&amp; $dir$fileNameWithoutExt&quot;, // &quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt.exe -Wall -g -O2 -static-libgcc -std=c++17 -fexec-charset=GBK &amp;&amp; $dir$fileNameWithoutExt&quot; }, // 右键run code时运行的命令；未注释的仅适用于PowerShell（Win10默认），文件名中有空格也可以编译运行；注释掉的适用于cmd（win7默认），PS和bash也能用，但文件名中有空格时无法运行*/ &quot;code-runner.saveFileBeforeRun&quot;: true, // run code前保存 &quot;code-runner.preserveFocus&quot;: true, // 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false &quot;code-runner.clearPreviousOutput&quot;: false, // 每次run code前清空属于code runner的终端消息，默认false &quot;code-runner.ignoreSelection&quot;: true, // 默认为false，效果是鼠标选中一块代码后可以单独执行，但C是编译型语言，不适合这样用 &quot;C_Cpp.clang_format_sortIncludes&quot;: true, // 格式化时调整include的顺序（按字母排序） }以上代码有很多我注释掉的部分，原因是有些配置文件是从windows的教程扒下来的，有些Mac上用不了，被我注释了。。。 然后就可以编译加调试了，但像我一样的小白肯定一头雾水，如果你想大致了解这些东西都是干什么的参见以下前俩个链接；解决debug问题的原文链接（该作者也可能是转载）是第三个： Visual Studio Code 如何编写运行 C、C++ 程序？ 玄魂：无废话–Mac OS, VS Code 搭建c/c++基本开发环境 debug解决方法出处","categories":[{"name":"配置","slug":"配置","permalink":"http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"-vscode","slug":"vscode","permalink":"http://yoursite.com/tags/vscode/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-02-26T16:00:00.000Z","updated":"2020-02-28T09:26:14.134Z","comments":true,"path":"2020/02/27/hello-world/","link":"","permalink":"http://yoursite.com/2020/02/27/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"记录","slug":"记录","permalink":"http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"-hello world","slug":"hello-world","permalink":"http://yoursite.com/tags/hello-world/"}]}]}